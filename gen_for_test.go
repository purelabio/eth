package eth

var TestAbi = Abi{
	AbiFunction{
		Type:     "function",
		Name:     "two",
		Constant: true,
		Inputs: []AbiParam{
			AbiParam{
				Type: "uint256",
				AbiType: AbiType{
					Type: "uint256",
					Kind: 2,
				},
			},
			AbiParam{
				Type: "uint32[]",
				AbiType: AbiType{
					Type: "uint32[]",
					Kind: 7,
					Elem: &AbiType{
						Type: "uint32",
						Kind: 2,
					},
				},
			},
			AbiParam{
				Type: "bytes10",
				AbiType: AbiType{
					Type:     "bytes10",
					Kind:     6,
					ArrayLen: 10,
					FixedLen: true,
				},
			},
			AbiParam{
				Type: "bytes",
				AbiType: AbiType{
					Type: "bytes",
					Kind: 6,
				},
			},
		},
		Outputs:         []AbiParam{},
		StateMutability: "pure",
		Selector:        [4]uint8{0x26, 0x15, 0xf1, 0x44},
	},
	AbiFunction{
		Type:     "function",
		Name:     "one",
		Constant: true,
		Inputs: []AbiParam{
			AbiParam{
				Type: "bytes",
				AbiType: AbiType{
					Type: "bytes",
					Kind: 6,
				},
			},
			AbiParam{
				Type: "bool",
				AbiType: AbiType{
					Type: "bool",
					Kind: 1,
				},
			},
			AbiParam{
				Type: "uint256[]",
				AbiType: AbiType{
					Type: "uint256[]",
					Kind: 7,
					Elem: &AbiType{
						Type: "uint256",
						Kind: 2,
					},
				},
			},
		},
		Outputs:         []AbiParam{},
		StateMutability: "pure",
		Selector:        [4]uint8{0x55, 0xcb, 0x92, 0xcd},
	},
	AbiFunction{
		Type:     "function",
		Name:     "three",
		Constant: true,
		Inputs: []AbiParam{
			AbiParam{
				Type: "address",
				AbiType: AbiType{
					Type: "address",
					Kind: 4,
				},
			},
		},
		Outputs:         []AbiParam{},
		StateMutability: "pure",
		Selector:        [4]uint8{0x9c, 0x82, 0xcb, 0x25},
	},
	AbiFunction{
		Type:     "function",
		Name:     "four",
		Constant: true,
		Inputs:   []AbiParam{},
		Outputs: []AbiParam{
			AbiParam{
				Type: "address",
				AbiType: AbiType{
					Type: "address",
					Kind: 4,
				},
			},
			AbiParam{
				Type: "string",
				AbiType: AbiType{
					Type: "string",
					Kind: 6,
				},
			},
		},
		StateMutability: "pure",
		Selector:        [4]uint8{0xa1, 0xfc, 0xa2, 0xb6},
	},
	AbiEvent{
		Type: "event",
		Name: "Transfer",
		Inputs: []AbiParam{
			AbiParam{
				Type:    "address",
				Indexed: true,
				AbiType: AbiType{
					Type: "address",
					Kind: 4,
				},
			},
			AbiParam{
				Type:    "address",
				Indexed: true,
				AbiType: AbiType{
					Type: "address",
					Kind: 4,
				},
			},
			AbiParam{
				Type:    "uint256",
				Indexed: true,
				AbiType: AbiType{
					Type: "uint256",
					Kind: 2,
				},
			},
		},
		Selector: Word{
			0xdd, 0xf2, 0x52, 0xad, 0x1b, 0xe2, 0xc8, 0x9b,
			0x69, 0xc2, 0xb0, 0x68, 0xfc, 0x37, 0x8d, 0xaa,
			0x95, 0x2b, 0xa7, 0xf1, 0x63, 0xc4, 0xa1, 0x16,
			0x28, 0xf5, 0x5a, 0x4d, 0xf5, 0x23, 0xb3, 0xef,
		},
		IndexedInputs: []AbiParam{
			AbiParam{
				Type:    "address",
				Indexed: true,
				AbiType: AbiType{
					Type: "address",
					Kind: 4,
				},
			},
			AbiParam{
				Type:    "address",
				Indexed: true,
				AbiType: AbiType{
					Type: "address",
					Kind: 4,
				},
			},
			AbiParam{
				Type:    "uint256",
				Indexed: true,
				AbiType: AbiType{
					Type: "uint256",
					Kind: 2,
				},
			},
		},
	},
}

const TestAbiJson = `[
	{
		"constant": true,
		"inputs": [
			{
				"name": "",
				"type": "uint256"
			},
			{
				"name": "",
				"type": "uint32[]"
			},
			{
				"name": "",
				"type": "bytes10"
			},
			{
				"name": "",
				"type": "bytes"
			}
		],
		"name": "two",
		"outputs": [],
		"payable": false,
		"stateMutability": "pure",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "",
				"type": "bytes"
			},
			{
				"name": "",
				"type": "bool"
			},
			{
				"name": "",
				"type": "uint256[]"
			}
		],
		"name": "one",
		"outputs": [],
		"payable": false,
		"stateMutability": "pure",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "",
				"type": "address"
			}
		],
		"name": "three",
		"outputs": [],
		"payable": false,
		"stateMutability": "pure",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "four",
		"outputs": [
			{
				"name": "",
				"type": "address"
			},
			{
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "pure",
		"type": "function"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"name": "",
				"type": "address"
			},
			{
				"indexed": true,
				"name": "",
				"type": "address"
			},
			{
				"indexed": true,
				"name": "",
				"type": "uint256"
			}
		],
		"name": "Transfer",
		"type": "event"
	}
]`

var TestCode = []uint8{
	0x60, 0x80, 0x60, 0x40, 0x52, 0x34, 0x80, 0x15,
	0x61, 0x00, 0x10, 0x57, 0x60, 0x00, 0x80, 0xfd,
	0x5b, 0x50, 0x61, 0x03, 0x2d, 0x80, 0x61, 0x00,
	0x20, 0x60, 0x00, 0x39, 0x60, 0x00, 0xf3, 0x00,
	0x60, 0x80, 0x60, 0x40, 0x52, 0x60, 0x04, 0x36,
	0x10, 0x61, 0x00, 0x61, 0x57, 0x63, 0xff, 0xff,
	0xff, 0xff, 0x7c, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x60, 0x00, 0x35, 0x04, 0x16, 0x63, 0x26, 0x15,
	0xf1, 0x44, 0x81, 0x14, 0x61, 0x00, 0x66, 0x57,
	0x80, 0x63, 0x55, 0xcb, 0x92, 0xcd, 0x14, 0x61,
	0x01, 0x1f, 0x57, 0x80, 0x63, 0x9c, 0x82, 0xcb,
	0x25, 0x14, 0x61, 0x01, 0xba, 0x57, 0x80, 0x63,
	0xa1, 0xfc, 0xa2, 0xb6, 0x14, 0x61, 0x01, 0xe8,
	0x57, 0x5b, 0x60, 0x00, 0x80, 0xfd, 0x5b, 0x34,
	0x80, 0x15, 0x61, 0x00, 0x72, 0x57, 0x60, 0x00,
	0x80, 0xfd, 0x5b, 0x50, 0x60, 0x40, 0x80, 0x51,
	0x60, 0x20, 0x60, 0x04, 0x60, 0x24, 0x80, 0x35,
	0x82, 0x81, 0x01, 0x35, 0x84, 0x81, 0x02, 0x80,
	0x87, 0x01, 0x86, 0x01, 0x90, 0x97, 0x52, 0x80,
	0x86, 0x52, 0x61, 0x01, 0x1d, 0x96, 0x84, 0x35,
	0x96, 0x36, 0x96, 0x60, 0x44, 0x95, 0x91, 0x94,
	0x90, 0x91, 0x01, 0x92, 0x91, 0x82, 0x91, 0x85,
	0x01, 0x90, 0x84, 0x90, 0x80, 0x82, 0x84, 0x37,
	0x50, 0x50, 0x60, 0x40, 0x80, 0x51, 0x60, 0x20,
	0x60, 0x1f, 0x81, 0x8a, 0x01, 0x35, 0x8b, 0x01,
	0x80, 0x35, 0x91, 0x82, 0x01, 0x83, 0x90, 0x04,
	0x83, 0x02, 0x84, 0x01, 0x83, 0x01, 0x85, 0x52,
	0x81, 0x84, 0x52, 0x98, 0x9b, 0x75, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x19, 0x8b, 0x35, 0x16,
	0x9b, 0x90, 0x9a, 0x90, 0x99, 0x94, 0x01, 0x97,
	0x50, 0x91, 0x95, 0x50, 0x91, 0x82, 0x01, 0x93,
	0x50, 0x91, 0x50, 0x81, 0x90, 0x84, 0x01, 0x83,
	0x82, 0x80, 0x82, 0x84, 0x37, 0x50, 0x94, 0x97,
	0x50, 0x61, 0x02, 0xa8, 0x96, 0x50, 0x50, 0x50,
	0x50, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x00, 0x5b,
	0x34, 0x80, 0x15, 0x61, 0x01, 0x2b, 0x57, 0x60,
	0x00, 0x80, 0xfd, 0x5b, 0x50, 0x60, 0x40, 0x80,
	0x51, 0x60, 0x20, 0x60, 0x04, 0x80, 0x35, 0x80,
	0x82, 0x01, 0x35, 0x60, 0x1f, 0x81, 0x01, 0x84,
	0x90, 0x04, 0x84, 0x02, 0x85, 0x01, 0x84, 0x01,
	0x90, 0x95, 0x52, 0x84, 0x84, 0x52, 0x61, 0x01,
	0x1d, 0x94, 0x36, 0x94, 0x92, 0x93, 0x60, 0x24,
	0x93, 0x92, 0x84, 0x01, 0x91, 0x90, 0x81, 0x90,
	0x84, 0x01, 0x83, 0x82, 0x80, 0x82, 0x84, 0x37,
	0x50, 0x50, 0x60, 0x40, 0x80, 0x51, 0x60, 0x20,
	0x80, 0x89, 0x01, 0x35, 0x8a, 0x01, 0x80, 0x35,
	0x80, 0x83, 0x02, 0x84, 0x81, 0x01, 0x84, 0x01,
	0x86, 0x52, 0x81, 0x85, 0x52, 0x99, 0x9c, 0x8b,
	0x35, 0x15, 0x15, 0x9c, 0x90, 0x9b, 0x90, 0x9a,
	0x95, 0x01, 0x98, 0x50, 0x92, 0x96, 0x50, 0x81,
	0x01, 0x94, 0x50, 0x90, 0x92, 0x50, 0x82, 0x91,
	0x90, 0x85, 0x01, 0x90, 0x84, 0x90, 0x80, 0x82,
	0x84, 0x37, 0x50, 0x94, 0x97, 0x50, 0x61, 0x02,
	0xae, 0x96, 0x50, 0x50, 0x50, 0x50, 0x50, 0x50,
	0x50, 0x56, 0x5b, 0x34, 0x80, 0x15, 0x61, 0x01,
	0xc6, 0x57, 0x60, 0x00, 0x80, 0xfd, 0x5b, 0x50,
	0x61, 0x01, 0x1d, 0x73, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x60, 0x04, 0x35, 0x16, 0x61, 0x02, 0xb3, 0x56,
	0x5b, 0x34, 0x80, 0x15, 0x61, 0x01, 0xf4, 0x57,
	0x60, 0x00, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x01,
	0xfd, 0x61, 0x02, 0xb6, 0x56, 0x5b, 0x60, 0x40,
	0x51, 0x80, 0x83, 0x73, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x16, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x81,
	0x52, 0x60, 0x20, 0x01, 0x80, 0x60, 0x20, 0x01,
	0x82, 0x81, 0x03, 0x82, 0x52, 0x83, 0x81, 0x81,
	0x51, 0x81, 0x52, 0x60, 0x20, 0x01, 0x91, 0x50,
	0x80, 0x51, 0x90, 0x60, 0x20, 0x01, 0x90, 0x80,
	0x83, 0x83, 0x60, 0x00, 0x5b, 0x83, 0x81, 0x10,
	0x15, 0x61, 0x02, 0x6c, 0x57, 0x81, 0x81, 0x01,
	0x51, 0x83, 0x82, 0x01, 0x52, 0x60, 0x20, 0x01,
	0x61, 0x02, 0x54, 0x56, 0x5b, 0x50, 0x50, 0x50,
	0x50, 0x90, 0x50, 0x90, 0x81, 0x01, 0x90, 0x60,
	0x1f, 0x16, 0x80, 0x15, 0x61, 0x02, 0x99, 0x57,
	0x80, 0x82, 0x03, 0x80, 0x51, 0x60, 0x01, 0x83,
	0x60, 0x20, 0x03, 0x61, 0x01, 0x00, 0x0a, 0x03,
	0x19, 0x16, 0x81, 0x52, 0x60, 0x20, 0x01, 0x91,
	0x50, 0x5b, 0x50, 0x93, 0x50, 0x50, 0x50, 0x50,
	0x60, 0x40, 0x51, 0x80, 0x91, 0x03, 0x90, 0xf3,
	0x5b, 0x50, 0x50, 0x50, 0x50, 0x56, 0x5b, 0x50,
	0x50, 0x50, 0x56, 0x5b, 0x50, 0x56, 0x5b, 0x60,
	0x40, 0x80, 0x51, 0x80, 0x82, 0x01, 0x90, 0x91,
	0x52, 0x60, 0x04, 0x81, 0x52, 0x7f, 0x74, 0x65,
	0x73, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x20,
	0x82, 0x01, 0x52, 0x72, 0xa3, 0x29, 0xc0, 0x64,
	0x87, 0x69, 0xa7, 0x3a, 0xfa, 0xc7, 0xf9, 0x38,
	0x1e, 0x08, 0xfb, 0x43, 0xdb, 0xea, 0x72, 0x91,
	0x56, 0x00, 0xa1, 0x65, 0x62, 0x7a, 0x7a, 0x72,
	0x30, 0x58, 0x20, 0xde, 0xe1, 0x6d, 0xfb, 0xcb,
	0x1d, 0x75, 0x1e, 0x36, 0xfd, 0x09, 0xe7, 0x7d,
	0xe2, 0x3a, 0xfc, 0xf9, 0x38, 0xd6, 0xd3, 0xa6,
	0x74, 0x02, 0x48, 0xa9, 0x11, 0x9e, 0x4d, 0x28,
	0x53, 0x22, 0x87, 0x00, 0x29,
}

const TestCodeHex = `0x608060405234801561001057600080fd5b5061032d806100206000396000f3006080604052600436106100615763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632615f144811461006657806355cb92cd1461011f5780639c82cb25146101ba578063a1fca2b6146101e8575b600080fd5b34801561007257600080fd5b5060408051602060046024803582810135848102808701860190975280865261011d9684359636966044959194909101929182918501908490808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989b75ffffffffffffffffffffffffffffffffffffffffffff198b35169b909a9099940197509195509182019350915081908401838280828437509497506102a89650505050505050565b005b34801561012b57600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261011d94369492936024939284019190819084018382808284375050604080516020808901358a01803580830284810184018652818552999c8b3515159c909b909a9501985092965081019450909250829190850190849080828437509497506102ae9650505050505050565b3480156101c657600080fd5b5061011d73ffffffffffffffffffffffffffffffffffffffff600435166102b3565b3480156101f457600080fd5b506101fd6102b6565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561026c578181015183820152602001610254565b50505050905090810190601f1680156102995780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b50505050565b505050565b50565b60408051808201909152600481527f7465737400000000000000000000000000000000000000000000000000000000602082015272a329c0648769a73afac7f9381e08fb43dbea72915600a165627a7a72305820dee16dfbcb1d751e36fd09e77de23afcf938d6d3a6740248a9119e4d285322870029`
